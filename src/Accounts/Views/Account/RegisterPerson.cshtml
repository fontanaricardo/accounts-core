@model Accounts.Models.RegisterPersonViewModel

@{
    ViewBag.Title = "Cadastro de pessoa física";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />

        <fieldset>

            <legend>Dados gerais</legend>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Person.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Person.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.CPF, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.CPF, new { htmlAttributes = new { @class = "form-control cpf" } })
                    @Html.ValidationMessageFor(model => model.Person.CPF, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control no-copy-paste" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmEmail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConfirmEmail, new { htmlAttributes = new { @class = "form-control no-copy-paste" } })
                    @Html.ValidationMessageFor(model => model.ConfirmEmail, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.RG, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.RG, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Person.RG, "", new { @class = "text-danger" })
                </div>
            </div>
        </fieldset>
		<div class="form-group">
			@Html.LabelFor(model => model.Person.Dispatcher, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Person.Dispatcher, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Person.Dispatcher, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			<label class="control-label col-md-2" for="">Telefone</label>
			<div class="col-md-10" id="PhonesDiv">
				@foreach (string phoneStr in ViewBag.Phones)
				{
					if (phoneStr == ViewBag.Phones[0])
					{
						<input class="form-control text-box single-line phone" id="Phone" name="Phone" type="text" value="@(phoneStr)">
					}
					else
					{
						<div><br><input class="form-control text-box single-line phone" id="Phone" name="Phone" type="text" value="@(phoneStr)"></div>
					}
				}
			</div>
		</div>


		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<a href="javascript:void(0);" class="btn btn-primary" id="AddPhoneBtn">Adicionar telefone</a>
				<a href="javascript:void(0);" class="btn btn-default" id="RemovePhoneBtn">Remover telefone</a>
			</div>
		</div>

        <fieldset>

            <legend>Endereço</legend>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Address.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="form-inline">
                        @Html.TextBoxFor(model => model.Person.Address.ZipCode, new { @class = "form-control zipcode" })
                        <button type="button" id="btnBuscarCEP" title="Busca o CEP para preencher os demais campos do formulário" class="btn btn-primary">
                            <i class="fa fa-search" aria-hidden="true"></i>
                        </button>
                        <a target="_blank" href="http://www.buscacep.correios.com.br/sistemas/buscacep/buscaCepEndereco.cfm">
                           <img src="~/images/correios-logo.png" /> 
                        </a>
                    </div>

                    @Html.ValidationMessageFor(model => model.Person.Address.ZipCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Address.Street, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Address.Street, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Person.Address.Street, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Address.Number, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Address.Number, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Person.Address.Number, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Address.Complement, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Address.Complement, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Person.Address.Complement, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Address.District, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Address.District, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Person.Address.District, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Address.City, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Address.City, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Person.Address.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Address.State, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Address.State, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Person.Address.State, "", new { @class = "text-danger" })
                </div>
            </div>
        </fieldset>

        <fieldset>
            <legend>Definição de senha</legend>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <p class="help-block">
                        A senha deve ter comprimento mínimo de 8 caracteres e possuir pelo menos:
                        <ul>
                            <li>uma letra maiúscula;</li>
                            <li>uma letra minúscula;</li>
                            <li>um número.</li>
                        </ul>
                    </p>
                </div>
            </div>
            
            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.Password, "Password")
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.ConfirmPassword, "Password")
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>

        </fieldset>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
                <div class="g-recaptcha" data-sitekey="6Le_cR4TAAAAAJp9DhZotxc-pcOsPceDDKQp33YR"></div>
			</div>
		</div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Cadastrar" class="btn btn-primary" />
				<a href="~/Account/Login" class="btn btn-default">Cancelar</a>
            </div>
        </div>
    </div>
}

@section Scripts {

	<script>
		$("#AddPhoneBtn").click(function () {
		    $("#PhonesDiv").append('<div><br><input class="form-control text-box single-line phone" id="Phone" name="Phone" type="text" value=""></div>');
		    maskPhones();
		});

		$("#RemovePhoneBtn").click(function () {
			$("#PhonesDiv div:last").remove();
		});

		function buscarCep() {
		    cep = $("input[name*='.Address.ZipCode']").val().trim();

		    $.getJSON("https://virtual.joinville.sc.gov.br/Endereco/Logradouros/Index?cep=" + cep, function (data) {
		        $("input[name*='.Address.Street']").val(data.registros[0].Tipo + " " + data.registros[0].Logradouro);
		        $("input[name*='.Address.District']").val(data.registros[0].Bairro);
		        $("input[name*='.Address.City']").val(data.registros[0].Cidade);
		        $("input[name*='.Address.State']").val(data.registros[0].UF);
		    }).fail(function () {
		        $("input[name*='.Address.Street']").prop("readonly", false);
		        $("input[name*='.Address.Street']").val("");
		        $("input[name*='.Address.District']").prop("readonly", false);
		        $("input[name*='.Address.District']").val("");
		        $("input[name*='.Address.City']").prop("readonly", false);
		        $("input[name*='.Address.City']").val("");
		        $("input[name*='.Address.State']").prop("readonly", false);
		        $("input[name*='.Address.State']").val("");
		        alert("CEP não encontrado");
		    }).success(function () {
		        $("input[name*='.Address.Street']").prop("readonly", true);
		        $("input[name*='.Address.District']").prop("readonly", true);
		        $("input[name*='.Address.City']").prop("readonly", true);
		        $("input[name*='.Address.State']").prop("readonly", true);
		    }).always(function () {
		        $("#btnBuscarCEP").prop("disabled", false);
		    });
		}

		$(document).ready(function () {
			
			$("#btnBuscarCEP").click(function (event) {
			    event.preventDefault();
				$("#btnBuscarCEP").prop("disabled", true);
				buscarCep();
			});

			$("#Person_Address_ZipCode").blur(function () {
			    buscarCep();
			});
		});

	</script>
}
